# Generated by Django 4.2.7 on 2025-08-10 02:17

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ABTestExperiment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="实验名称", max_length=100, unique=True),
                ),
                ("description", models.TextField(help_text="实验描述")),
                ("start_date", models.DateTimeField(help_text="开始时间")),
                ("end_date", models.DateTimeField(help_text="结束时间")),
                ("is_active", models.BooleanField(default=True, help_text="是否激活")),
                (
                    "control_group_ratio",
                    models.FloatField(
                        default=0.5,
                        help_text="对照组比例",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "experiment_config",
                    models.JSONField(default=dict, help_text="实验配置参数"),
                ),
                ("target_metric", models.CharField(help_text="目标指标", max_length=50)),
                ("success_criteria", models.TextField(help_text="成功标准")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "A/B测试实验",
                "verbose_name_plural": "A/B测试实验",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="GameElementEffectiveness",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("element_name", models.CharField(help_text="游戏化元素名称", max_length=50)),
                ("element_type", models.CharField(help_text="元素类型", max_length=30)),
                (
                    "engagement_impact",
                    models.FloatField(default=0.0, help_text="参与度影响"),
                ),
                ("retention_impact", models.FloatField(default=0.0, help_text="留存影响")),
                (
                    "learning_efficiency_impact",
                    models.FloatField(default=0.0, help_text="学习效率影响"),
                ),
                (
                    "total_interactions",
                    models.IntegerField(default=0, help_text="总交互次数"),
                ),
                ("unique_users", models.IntegerField(default=0, help_text="独立用户数")),
                (
                    "avg_interaction_frequency",
                    models.FloatField(default=0.0, help_text="平均交互频率"),
                ),
                ("measurement_period_start", models.DateTimeField(help_text="测量周期开始")),
                ("measurement_period_end", models.DateTimeField(help_text="测量周期结束")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "游戏化元素效果",
                "verbose_name_plural": "游戏化元素效果",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserBehaviorPattern",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "preferred_study_time",
                    models.CharField(help_text="偏好学习时间段", max_length=20),
                ),
                ("avg_session_length", models.IntegerField(help_text="平均会话时长(分钟)")),
                (
                    "preferred_difficulty",
                    models.CharField(help_text="偏好难度", max_length=20),
                ),
                ("engagement_type", models.CharField(help_text="参与类型", max_length=30)),
                (
                    "motivation_factors",
                    models.JSONField(default=list, help_text="激励因素"),
                ),
                (
                    "social_activity_level",
                    models.CharField(help_text="社交活跃度", max_length=20),
                ),
                (
                    "competitive_tendency",
                    models.FloatField(default=0.0, help_text="竞争倾向"),
                ),
                ("learning_style", models.CharField(help_text="学习风格", max_length=30)),
                ("retention_rate", models.FloatField(default=0.0, help_text="记忆保持率")),
                (
                    "churn_risk_score",
                    models.FloatField(default=0.0, help_text="流失风险评分"),
                ),
                ("engagement_score", models.FloatField(default=0.0, help_text="参与度评分")),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="behavior_patterns",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "用户行为模式",
                "verbose_name_plural": "用户行为模式",
                "ordering": ["-last_updated"],
            },
        ),
        migrations.CreateModel(
            name="UserRetentionData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("registration_date", models.DateField(help_text="注册日期")),
                (
                    "day_1_retention",
                    models.BooleanField(default=False, help_text="次日留存"),
                ),
                (
                    "day_3_retention",
                    models.BooleanField(default=False, help_text="3日留存"),
                ),
                (
                    "day_7_retention",
                    models.BooleanField(default=False, help_text="7日留存"),
                ),
                (
                    "day_14_retention",
                    models.BooleanField(default=False, help_text="14日留存"),
                ),
                (
                    "day_30_retention",
                    models.BooleanField(default=False, help_text="30日留存"),
                ),
                (
                    "total_active_days",
                    models.IntegerField(default=0, help_text="总活跃天数"),
                ),
                (
                    "consecutive_active_days",
                    models.IntegerField(default=0, help_text="连续活跃天数"),
                ),
                (
                    "last_active_date",
                    models.DateField(blank=True, help_text="最后活跃日期", null=True),
                ),
                ("total_sessions", models.IntegerField(default=0, help_text="总会话数")),
                (
                    "total_study_time",
                    models.IntegerField(default=0, help_text="总学习时长(分钟)"),
                ),
                (
                    "total_words_learned",
                    models.IntegerField(default=0, help_text="总学习单词数"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="retention_data",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "用户留存数据",
                "verbose_name_plural": "用户留存数据",
                "ordering": ["-registration_date"],
                "unique_together": {("user", "registration_date")},
            },
        ),
        migrations.CreateModel(
            name="UserEngagementMetrics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(default=django.utils.timezone.now)),
                ("session_count", models.IntegerField(default=0, help_text="当日会话次数")),
                (
                    "total_session_duration",
                    models.IntegerField(default=0, help_text="总会话时长(秒)"),
                ),
                (
                    "avg_session_duration",
                    models.FloatField(default=0.0, help_text="平均会话时长(秒)"),
                ),
                ("words_practiced", models.IntegerField(default=0, help_text="练习单词数")),
                ("correct_answers", models.IntegerField(default=0, help_text="正确答题数")),
                ("total_answers", models.IntegerField(default=0, help_text="总答题数")),
                (
                    "accuracy_rate",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("exp_gained", models.IntegerField(default=0, help_text="获得经验值")),
                ("coins_earned", models.IntegerField(default=0, help_text="获得金币")),
                (
                    "achievements_unlocked",
                    models.IntegerField(default=0, help_text="解锁成就数"),
                ),
                ("streak_count", models.IntegerField(default=0, help_text="连击次数")),
                (
                    "battles_participated",
                    models.IntegerField(default=0, help_text="参与对战次数"),
                ),
                ("battles_won", models.IntegerField(default=0, help_text="对战胜利次数")),
                (
                    "social_interactions",
                    models.IntegerField(default=0, help_text="社交互动次数"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="engagement_metrics",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "用户粘性指标",
                "verbose_name_plural": "用户粘性指标",
                "ordering": ["-date"],
                "unique_together": {("user", "date")},
            },
        ),
        migrations.CreateModel(
            name="ABTestParticipant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "group",
                    models.CharField(
                        choices=[("control", "对照组"), ("experiment", "实验组")],
                        help_text="分组",
                        max_length=20,
                    ),
                ),
                (
                    "joined_at",
                    models.DateTimeField(auto_now_add=True, help_text="加入时间"),
                ),
                (
                    "conversion_achieved",
                    models.BooleanField(default=False, help_text="是否达成转化"),
                ),
                (
                    "conversion_date",
                    models.DateTimeField(blank=True, help_text="转化时间", null=True),
                ),
                (
                    "metric_value",
                    models.FloatField(blank=True, help_text="指标值", null=True),
                ),
                ("additional_data", models.JSONField(default=dict, help_text="额外数据")),
                (
                    "experiment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="participants",
                        to="analytics.abtestexperiment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ab_test_participations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "A/B测试参与者",
                "verbose_name_plural": "A/B测试参与者",
                "ordering": ["-joined_at"],
                "unique_together": {("experiment", "user")},
            },
        ),
    ]
