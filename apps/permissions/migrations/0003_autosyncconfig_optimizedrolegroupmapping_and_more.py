# Generated by Django 4.2.23 on 2025-08-18 01:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("auth", "0012_alter_user_first_name_max_length"),
        ("permissions", "0002_menumoduleconfig_menu_level_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="AutoSyncConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "enable_auto_sync",
                    models.BooleanField(default=True, help_text="是否启用自动同步"),
                ),
                (
                    "sync_on_user_create",
                    models.BooleanField(default=True, help_text="用户创建时同步"),
                ),
                (
                    "sync_on_user_update",
                    models.BooleanField(default=True, help_text="用户更新时同步"),
                ),
                (
                    "sync_on_role_change",
                    models.BooleanField(default=True, help_text="角色变更时同步"),
                ),
                (
                    "sync_on_permission_change",
                    models.BooleanField(default=True, help_text="权限变更时同步"),
                ),
                (
                    "auto_sync_interval_minutes",
                    models.IntegerField(default=60, help_text="自动同步间隔（分钟）"),
                ),
                (
                    "batch_sync_size",
                    models.IntegerField(default=100, help_text="批量同步大小"),
                ),
                (
                    "max_retry_attempts",
                    models.IntegerField(default=3, help_text="最大重试次数"),
                ),
                (
                    "retry_delay_seconds",
                    models.IntegerField(default=30, help_text="重试延迟（秒）"),
                ),
                (
                    "notify_on_sync_failure",
                    models.BooleanField(default=True, help_text="同步失败时通知"),
                ),
                (
                    "notification_emails",
                    models.JSONField(default=list, help_text="通知邮箱列表"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "自动同步配置",
                "verbose_name_plural": "自动同步配置",
                "db_table": "auto_sync_config",
            },
        ),
        migrations.CreateModel(
            name="OptimizedRoleGroupMapping",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("student", "学生"),
                            ("parent", "家长"),
                            ("teacher", "自由老师"),
                            ("admin", "管理员"),
                            ("dean", "教导主任"),
                            ("academic_director", "教务主任"),
                            ("research_leader", "教研组长"),
                        ],
                        help_text="角色类型",
                        max_length=50,
                        unique=True,
                    ),
                ),
                ("auto_sync", models.BooleanField(default=True, help_text="是否自动同步")),
                (
                    "sync_permissions",
                    models.BooleanField(default=True, help_text="是否同步权限"),
                ),
                ("sync_users", models.BooleanField(default=True, help_text="是否同步用户")),
                (
                    "base_permissions",
                    models.JSONField(default=dict, help_text="基础权限配置"),
                ),
                (
                    "menu_permissions",
                    models.JSONField(default=dict, help_text="菜单权限配置"),
                ),
                (
                    "custom_permissions",
                    models.JSONField(default=dict, help_text="自定义权限配置"),
                ),
                (
                    "last_sync_status",
                    models.CharField(
                        choices=[
                            ("pending", "待同步"),
                            ("syncing", "同步中"),
                            ("success", "同步成功"),
                            ("failed", "同步失败"),
                        ],
                        default="pending",
                        help_text="最后同步状态",
                        max_length=20,
                    ),
                ),
                (
                    "last_sync_time",
                    models.DateTimeField(blank=True, help_text="最后同步时间", null=True),
                ),
                (
                    "sync_error_message",
                    models.TextField(blank=True, help_text="同步错误信息"),
                ),
                ("sync_count", models.IntegerField(default=0, help_text="同步次数")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "优化角色组映射",
                "verbose_name_plural": "优化角色组映射",
                "db_table": "optimized_role_group_mapping",
                "ordering": ["role"],
            },
        ),
        migrations.RemoveField(
            model_name="permissionsynclog",
            name="action",
        ),
        migrations.RemoveField(
            model_name="permissionsynclog",
            name="success",
        ),
        migrations.AddField(
            model_name="permissionsynclog",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="permission_sync_logs",
                to=settings.AUTH_USER_MODEL,
                verbose_name="操作人",
            ),
        ),
        migrations.AddField(
            model_name="permissionsynclog",
            name="duration_ms",
            field=models.IntegerField(blank=True, help_text="执行时长（毫秒）", null=True),
        ),
        migrations.AddField(
            model_name="permissionsynclog",
            name="extra_data",
            field=models.JSONField(blank=True, default=dict, help_text="额外数据"),
        ),
        migrations.AddField(
            model_name="permissionsynclog",
            name="is_success",
            field=models.BooleanField(default=1, help_text="是否成功"),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="permissionsynclog",
            name="operation",
            field=models.CharField(
                choices=[
                    ("create", "创建"),
                    ("update", "更新"),
                    ("delete", "删除"),
                    ("sync", "同步"),
                    ("assign", "分配"),
                    ("revoke", "撤销"),
                ],
                default=1,
                help_text="操作类型",
                max_length=20,
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="permissionsynclog",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name="permissionsynclog",
            name="result",
            field=models.TextField(help_text="同步结果"),
        ),
        migrations.AlterField(
            model_name="permissionsynclog",
            name="sync_type",
            field=models.CharField(
                choices=[
                    ("role_group_sync", "角色组同步"),
                    ("user_permission_sync", "用户权限同步"),
                    ("menu_permission_sync", "菜单权限同步"),
                    ("bulk_sync", "批量同步"),
                    ("manual_sync", "手动同步"),
                ],
                help_text="同步类型",
                max_length=50,
            ),
        ),
        migrations.AlterField(
            model_name="permissionsynclog",
            name="target_id",
            field=models.CharField(help_text="目标ID", max_length=100),
        ),
        migrations.AlterField(
            model_name="permissionsynclog",
            name="target_type",
            field=models.CharField(
                choices=[
                    ("user", "用户"),
                    ("group", "组"),
                    ("role", "角色"),
                    ("menu", "菜单"),
                    ("system", "系统"),
                ],
                help_text="目标类型",
                max_length=20,
            ),
        ),
        migrations.AddIndex(
            model_name="permissionsynclog",
            index=models.Index(
                fields=["sync_type", "created_at"],
                name="permission__sync_ty_828c11_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="permissionsynclog",
            index=models.Index(
                fields=["target_type", "target_id"],
                name="permission__target__e3461d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="permissionsynclog",
            index=models.Index(
                fields=["is_success", "created_at"],
                name="permission__is_succ_0c2bcb_idx",
            ),
        ),
        migrations.AlterModelTable(
            name="permissionsynclog",
            table="permission_sync_log",
        ),
        migrations.AddField(
            model_name="optimizedrolegroupmapping",
            name="group",
            field=models.OneToOneField(
                help_text="对应的Django组",
                on_delete=django.db.models.deletion.CASCADE,
                to="auth.group",
            ),
        ),
    ]
