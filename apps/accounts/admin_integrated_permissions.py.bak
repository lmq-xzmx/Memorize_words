"""权限与菜单管理中心

统一管理：
- 权限分配与同步
- 菜单配置与访问控制
- 角色组映射关系
- 权限继承与级联
"""

from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse, path
from django.shortcuts import render, redirect
from django.contrib import messages
from django.http import JsonResponse
from typing import Any, Dict, List

from apps.permissions.models import (
    RoleManagement, RoleGroupMapping, RoleMenuPermission,
    MenuModuleConfig, PermissionSyncLog
)
from .models import CustomUser, UserRole


@admin.register(RoleManagement)
class IntegratedRoleManagementAdmin(admin.ModelAdmin):
    """整合权限管理中心
    
    统一管理：
    - 角色权限配置
    - 权限继承关系
    - 权限同步状态
    - 批量权限操作
    """
    
    list_display = [
        'role_name', 'role_code', 'get_user_count', 'get_permission_count',
        'get_sync_status', 'is_active', 'permission_actions'
    ]
    list_filter = ['is_active', 'created_at']
    search_fields = ['role_name', 'role_code', 'description']
    ordering = ['role_code']
    
    fieldsets = (
        ('基本信息', {
            'fields': ('role_name', 'role_code', 'description')
        }),
        ('权限配置', {
            'fields': ('parent_role', 'permissions'),
            'description': '设置角色继承关系和具体权限'
        }),
        ('状态设置', {
            'fields': ('is_active',),
            'classes': ('collapse',)
        }),
    )
    
    filter_horizontal = ['permissions']
    
    def get_user_count(self, obj):
        """获取角色用户数量"""
        count = CustomUser.objects.filter(role=obj.role_code).count()
        if count > 0:
            return format_html(
                '<span style="color: #007cba; font-weight: bold;">{} 个用户</span>',
                count
            )
        return format_html('<span style="color: #6c757d;">无用户</span>')
    
    get_user_count.short_description = '用户数量'  # type: ignore
    
    def get_permission_count(self, obj):
        """获取权限数量"""
        count = obj.permissions.count()
        inherited_count = self.get_inherited_permissions_count(obj)
        
        if count > 0 or inherited_count > 0:
            return format_html(
                '<span style="color: #28a745;">直接: {} | 继承: {}</span>',
                count, inherited_count
            )
        return format_html('<span style="color: #6c757d;">无权限</span>')
    
    get_permission_count.short_description = '权限统计'  # type: ignore
    
    def get_inherited_permissions_count(self, obj):
        """获取继承权限数量"""
        if obj.parent_role:
            return obj.parent_role.permissions.count()
        return 0
    
    def get_sync_status(self, obj):
        """获取同步状态"""
        try:
            # 检查最近的同步日志
            latest_log = PermissionSyncLog.objects.filter(
                target_type='role',
                target_id=obj.role_code
            ).order_by('-created_at').first()
            
            if latest_log:
                if latest_log.success:
                    return format_html(
                        '<span style="color: #28a745; background: #d4edda; padding: 2px 6px; '
                        'border-radius: 3px; font-size: 12px;">✅ 已同步</span>'
                    )
                else:
                    return format_html(
                        '<span style="color: #dc3545; background: #f8d7da; padding: 2px 6px; '
                        'border-radius: 3px; font-size: 12px;">❌ 同步失败</span>'
                    )
            return format_html(
                '<span style="color: #ffc107; background: #fff3cd; padding: 2px 6px; '
                'border-radius: 3px; font-size: 12px;">⚠️ 待同步</span>'
            )
        except Exception as e:
            return f'错误: {str(e)}'
    
    get_sync_status.short_description = '同步状态'  # type: ignore
    
    def permission_actions(self, obj):
        """权限操作按钮"""
        actions = []
        
        # 权限详情
        actions.append(
            f'<a href="{reverse("admin:permissions_role_detail", args=[obj.pk])}" '
            f'class="button" style="background: #17a2b8; color: white; padding: 2px 6px; '
            f'text-decoration: none; border-radius: 3px; font-size: 11px; margin-right: 3px;">'
            f'👁️ 详情</a>'
        )
        
        # 同步权限
        actions.append(
            f'<a href="#" onclick="syncRolePermissions({obj.pk})" '
            f'class="button" style="background: #28a745; color: white; padding: 2px 6px; '
            f'text-decoration: none; border-radius: 3px; font-size: 11px; margin-right: 3px;">'
            f'🔄 同步</a>'
        )
        
        # 批量分配
        actions.append(
            f'<a href="{reverse("admin:permissions_batch_assign", args=[obj.pk])}" '
            f'class="button" style="background: #ffc107; color: black; padding: 2px 6px; '
            f'text-decoration: none; border-radius: 3px; font-size: 11px;">'
            f'📋 批量</a>'
        )
        
        return format_html(''.join(actions))
    
    permission_actions.short_description = '操作'  # type: ignore
    
    def get_urls(self):
        """添加自定义URL"""
        urls = super().get_urls()
        custom_urls = [
            path(
                'permission-center/',
                self.admin_site.admin_view(self.permission_center_view),
                name='permissions_center'
            ),
            path(
                'role-detail/<int:role_id>/',
                self.admin_site.admin_view(self.role_detail_view),
                name='permissions_role_detail'
            ),
            path(
                'batch-assign/<int:role_id>/',
                self.admin_site.admin_view(self.batch_assign_view),
                name='permissions_batch_assign'
            ),
            path(
                'sync-role/<int:role_id>/',
                self.admin_site.admin_view(self.sync_role_view),
                name='permissions_sync_role'
            ),
        ]
        return custom_urls + urls
    
    def permission_center_view(self, request):
        """权限管理中心视图"""
        context = {
            'title': '权限与菜单管理中心',
            'permission_stats': self.get_permission_stats(),
            'role_hierarchy': self.get_role_hierarchy(),
            'recent_sync_logs': PermissionSyncLog.objects.order_by('-sync_time')[:10],
        }
        return render(request, 'admin/permissions/permission_center.html', context)
    
    def get_permission_stats(self):
        """获取权限统计"""
        from django.contrib.auth.models import Permission
        
        return {
            'total_roles': RoleManagement.objects.count(),
            'active_roles': RoleManagement.objects.filter(is_active=True).count(),
            'total_permissions': Permission.objects.count(),
            'menu_configs': MenuModuleConfig.objects.count(),
            'role_mappings': RoleGroupMapping.objects.count(),
        }
    
    def get_role_hierarchy(self):
        """获取角色层级结构"""
        roles = RoleManagement.objects.filter(is_active=True)
        hierarchy = {}
        
        for role in roles:
            if role.parent:
                if role.parent.display_name not in hierarchy:
                    hierarchy[role.parent.display_name] = []
                hierarchy[role.parent.display_name].append(role)
            else:
                if '根角色' not in hierarchy:
                    hierarchy['根角色'] = []
                hierarchy['根角色'].append(role)
        
        return hierarchy
    
    def role_detail_view(self, request, role_id):
        """角色权限详情视图"""
        from django.shortcuts import get_object_or_404
        
        role = get_object_or_404(RoleManagement, pk=role_id)
        
        context = {
            'title': f'角色权限详情: {role.display_name}',
            'role': role,
            'direct_permissions': role.permissions.all(),
            'inherited_permissions': role.parent.permissions.all() if role.parent else [],
            'users': CustomUser.objects.filter(role=role.role),
            'menu_permissions': RoleMenuPermission.objects.filter(role=role.role),
        }
        return render(request, 'admin/permissions/role_detail.html', context)
    
    def batch_assign_view(self, request, role_id):
        """批量权限分配视图"""
        from django.shortcuts import get_object_or_404
        from django.contrib.auth.models import Permission
        
        role = get_object_or_404(RoleManagement, pk=role_id)
        
        if request.method == 'POST':
            permission_ids = request.POST.getlist('permissions')
            permissions = Permission.objects.filter(id__in=permission_ids)
            
            if request.POST.get('action') == 'add':
                role.permissions.add(*permissions)
                messages.success(request, f'成功为角色 {role.display_name} 添加 {len(permissions)} 个权限')
            elif request.POST.get('action') == 'remove':
                role.permissions.remove(*permissions)
                messages.success(request, f'成功从角色 {role.display_name} 移除 {len(permissions)} 个权限')
            
            return redirect('admin:permissions_rolemanagement_changelist')
        
        context = {
            'title': f'批量权限分配: {role.display_name}',
            'role': role,
            'all_permissions': Permission.objects.all().order_by('content_type__app_label', 'codename'),
            'current_permissions': role.permissions.all(),
        }
        return render(request, 'admin/permissions/batch_assign.html', context)
    
    def sync_role_view(self, request, role_id):
        """同步角色权限"""
        from django.shortcuts import get_object_or_404
        
        role = get_object_or_404(RoleManagement, pk=role_id)
        
        try:
            # 执行权限同步逻辑
            success_count = self.sync_role_permissions(role)
            
            # 记录同步日志
            PermissionSyncLog.objects.create(
                sync_type='manual',
                target_type='role',
                target_id=role.role,
                action='sync_permissions',
                result=f'成功同步 {success_count} 个用户的权限',
                success=True
            )
            
            return JsonResponse({
                'success': True,
                'message': f'角色 {role.display_name} 权限同步成功，影响 {success_count} 个用户'
            })
            
        except Exception as e:
            # 记录失败日志
            PermissionSyncLog.objects.create(
                sync_type='manual',
                target_type='role',
                target_id=role.role,
                action='sync_permissions',
                result=f'同步失败: {str(e)}',
                success=False
            )
            
            return JsonResponse({
                'success': False,
                'message': f'权限同步失败: {str(e)}'
            })
    
    def sync_role_permissions(self, role):
        """执行角色权限同步"""
        from django.contrib.auth.models import Group
        
        # 获取或创建对应的组
        group, created = Group.objects.get_or_create(name=f'{role.display_name}组')
        
        # 同步权限到组
        group.permissions.clear()
        group.permissions.add(*role.permissions.all())
        
        # 如果有父角色，继承父角色权限
        if role.parent:
            group.permissions.add(*role.parent.permissions.all())
        
        # 同步用户到组
        users = CustomUser.objects.filter(role=role.role)
        for user in users:
            user.groups.clear()
            user.groups.add(group)
        
        return users.count()
    
    class Media:
        js = ('admin/js/integrated_permissions_admin.js',)
        css = {
            'all': ('admin/css/integrated_admin.css',)
        }


@admin.register(MenuModuleConfig)
class IntegratedMenuConfigAdmin(admin.ModelAdmin):
    """整合菜单配置管理
    
    统一管理：
    - 菜单模块配置
    - 访问权限控制
    - 菜单层级结构
    - 显示顺序设置
    """
    
    list_display = [
        'name', 'key', 'get_parent_info', 'get_role_access',
        'is_active', 'sort_order', 'menu_actions'
    ]
    list_filter = ['is_active', 'menu_level']
    search_fields = ['name', 'key', 'description']
    ordering = ['sort_order', 'key']
    
    fieldsets = (
        ('基本信息', {
            'fields': ('name', 'key', 'description')
        }),
        ('层级结构', {
            'fields': ('menu_level', 'sort_order')
        }),
        ('访问控制', {
            'fields': ('url', 'icon', 'is_active')
        }),
    )
    
    def get_parent_info(self, obj):
        """获取父模块信息"""
        level_display = dict(MenuModuleConfig.MENU_LEVEL_CHOICES).get(obj.menu_level, obj.menu_level)
        return format_html(
            '<span style="color: #007cba;">📁 {}</span>',
            level_display
        )
    
    get_parent_info.short_description = '父模块'  # type: ignore
    
    def get_role_access(self, obj):
        """获取角色访问权限"""
        try:
            menu_perms = RoleMenuPermission.objects.filter(menu_module=obj)
            if menu_perms.exists():
                roles = [perm.get_role_display() for perm in menu_perms[:3]]
                count = menu_perms.count()
                if count > 3:
                    roles.append(f'等{count}个角色')
                return format_html(
                    '<span style="color: #17a2b8; font-size: 12px;">{}</span>',
                    ', '.join(roles)
                )
            return format_html('<span style="color: #6c757d;">无限制</span>')
        except Exception as e:
            return f'错误: {str(e)}'
    
    get_role_access.short_description = '角色访问'  # type: ignore
    
    def menu_actions(self, obj):
        """菜单操作按钮"""
        actions = []
        
        # 权限配置
        actions.append(
            f'<a href="{reverse("admin:menu_permissions", args=[obj.pk])}" '
            f'class="button" style="background: #28a745; color: white; padding: 2px 6px; '
            f'text-decoration: none; border-radius: 3px; font-size: 11px; margin-right: 3px;">'
            f'🔐 权限</a>'
        )
        
        # 同级模块
        same_level_count = MenuModuleConfig.objects.filter(menu_level=obj.menu_level).count()
        if same_level_count > 1:
            actions.append(
                f'<a href="?menu_level__exact={obj.menu_level}" '
                f'class="button" style="background: #17a2b8; color: white; padding: 2px 6px; '
                f'text-decoration: none; border-radius: 3px; font-size: 11px;">'
                f'📂 同级({same_level_count})</a>'
            )
        
        return format_html(''.join(actions))
    
    menu_actions.short_description = '操作'  # type: ignore
    
    def get_urls(self):
        """添加自定义URL"""
        urls = super().get_urls()
        custom_urls = [
            path(
                'menu-permissions/<int:menu_id>/',
                self.admin_site.admin_view(self.menu_permissions_view),
                name='menu_permissions'
            ),
        ]
        return custom_urls + urls
    
    def menu_permissions_view(self, request, menu_id):
        """菜单权限配置视图"""
        from django.shortcuts import get_object_or_404
        
        menu = get_object_or_404(MenuModuleConfig, pk=menu_id)
        
        if request.method == 'POST':
            # 处理权限配置提交
            role_codes = request.POST.getlist('roles')
            
            # 清除现有权限
            RoleMenuPermission.objects.filter(menu_module=menu).delete()
            
            # 添加新权限
            for role_code in role_codes:
                RoleMenuPermission.objects.create(
                    role=role_code,
                    menu_module=menu,
                    can_view=True
                )
            
            messages.success(request, f'菜单 {menu.name} 的权限配置已更新')
            return redirect('admin:permissions_menumoduleconfig_changelist')
        
        context = {
            'title': f'菜单权限配置: {menu.name}',
            'menu': menu,
            'all_roles': UserRole.choices,
            'current_roles': RoleMenuPermission.objects.filter(
                menu_module=menu
            ).values_list('role', flat=True),
        }
        return render(request, 'admin/permissions/menu_permissions.html', context)