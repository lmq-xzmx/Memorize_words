from rest_framework import viewsets, status
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from django.db import transaction
from django.contrib.auth import get_user_model
from django_filters.rest_framework import DjangoFilterBackend

from .models import (
    CustomUser, UserRole, RoleTemplate, RoleExtension, 
    UserExtensionData, RoleLevel, RoleUser
)
from .serializers import UserExtensionDataSerializer
from .template_api_views import BatchUserExtensionSerializer

User = get_user_model()


class BulkOperationsViewSet(viewsets.ViewSet):
    """统一批量操作视图集"""
    permission_classes = [IsAuthenticated]
    
    @action(detail=False, methods=['post'])
    def create_users(self, request):
        """批量创建用户"""
        users_data = request.data.get('users', []) if hasattr(request.data, 'get') else []
        if not users_data:
            return Response(
                {'error': '用户数据不能为空'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # 验证权限
        if not (getattr(request.user, 'role', None) == UserRole.ADMIN):
            return Response(
                {'error': '权限不足'}, 
                status=status.HTTP_403_FORBIDDEN
            )
        
        created_users = []
        errors = []
        
        with transaction.atomic():
            for user_data in users_data:
                try:
                    user = CustomUser.objects.create_user(
                        username=user_data.get('username'),
                        email=user_data.get('email', ''),
                        password=user_data.get('password', 'default123'),
                        role=user_data.get('role', UserRole.STUDENT),
                        real_name=user_data.get('real_name', ''),
                        phone_number=user_data.get('phone_number', '')
                    )
                    created_users.append({
                        'id': user.pk,
                        'username': user.username,
                        'role': user.role
                    })
                except Exception as e:
                    errors.append(f"创建用户 {user_data.get('username')} 失败: {str(e)}")
        
        return Response({
            'message': f'批量创建完成，成功创建 {len(created_users)} 个用户',
            'created_users': created_users,
            'errors': errors
        })
    
    @action(detail=False, methods=['post'])
    def assign_roles(self, request):
        """批量分配角色"""
        user_ids = request.data.get('user_ids', []) if hasattr(request.data, 'get') else []
        target_role = request.data.get('role') if hasattr(request.data, 'get') else None
        
        if not user_ids or not target_role:
            return Response(
                {'error': '用户ID列表和目标角色不能为空'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # 验证权限
        if not (getattr(request.user, 'role', None) == UserRole.ADMIN):
            return Response(
                {'error': '权限不足'}, 
                status=status.HTTP_403_FORBIDDEN
            )
        
        updated_count = 0
        errors = []
        
        with transaction.atomic():
            for user_id in user_ids:
                try:
                    user = CustomUser.objects.get(pk=user_id)
                    old_role = user.role
                    user.role = target_role
                    user.save()
                    updated_count += 1
                except CustomUser.DoesNotExist:
                    errors.append(f'用户ID {user_id} 不存在')
                except Exception as e:
                    errors.append(f'更新用户 {user_id} 角色失败: {str(e)}')
        
        return Response({
            'message': f'批量角色分配完成，成功更新 {updated_count} 个用户',
            'updated_count': updated_count,
            'errors': errors
        })
    
    @action(detail=False, methods=['post'])
    def update_extensions(self, request):
        """批量更新用户增项数据"""
        serializer = BatchUserExtensionSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        
        user_ids = serializer.validated_data.get('user_ids', [])
        extension_data = serializer.validated_data.get('extension_data', {})
        
        # 验证用户权限
        if not (getattr(request.user, 'role', None) == UserRole.ADMIN):
            # 非管理员只能操作自己的数据
            if len(user_ids) > 1 or (user_ids and user_ids[0] != request.user.id):
                return Response(
                    {'error': '权限不足'},
                    status=status.HTTP_403_FORBIDDEN
                )
        
        updated_count = 0
        errors = []
        
        with transaction.atomic():
            for user_id in user_ids:
                try:
                    user = CustomUser.objects.get(pk=user_id)
                    for field_name, value in extension_data.items():
                        try:
                            extension = RoleExtension.objects.get(
                                role=user.role,
                                field_name=field_name,
                                is_active=True
                            )
                            
                            data_obj, created = UserExtensionData.objects.update_or_create(
                                user=user,
                                role_extension=extension,
                                defaults={'field_value': value}
                            )
                            
                            updated_count += 1
                            
                        except RoleExtension.DoesNotExist:
                            errors.append(f'用户{user.username}的角色{user.role}不存在字段{field_name}')
                            
                except CustomUser.DoesNotExist:
                    errors.append(f'用户ID {user_id} 不存在')
        
        return Response({
            'message': f'批量更新完成，成功更新 {updated_count} 条记录',
            'updated_count': updated_count,
            'errors': errors
        })
    
    @action(detail=False, methods=['post'])
    def apply_template(self, request):
        """批量应用角色模板"""
        template_id = request.data.get('template_id') if hasattr(request.data, 'get') else None
        user_ids = request.data.get('user_ids', []) if hasattr(request.data, 'get') else []
        
        if not template_id:
            return Response(
                {'error': '模板ID不能为空'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # 验证权限
        if not (getattr(request.user, 'role', None) == UserRole.ADMIN):
            return Response(
                {'error': '权限不足'}, 
                status=status.HTTP_403_FORBIDDEN
            )
        
        try:
            template = RoleTemplate.objects.get(id=template_id, is_active=True)
        except RoleTemplate.DoesNotExist:
            return Response(
                {'error': '模板不存在'}, 
                status=status.HTTP_404_NOT_FOUND
            )
        
        # 获取目标用户
        if not user_ids:
            users = CustomUser.objects.filter(role=template.role, is_active=True)
        else:
            users = CustomUser.objects.filter(pk__in=user_ids, role=template.role, is_active=True)
        
        applied_count = 0
        with transaction.atomic():
            for user in users:
                template_fields = RoleExtension.objects.filter(role_template=template, is_active=True)
                for field in template_fields:
                    # 创建或更新用户增项数据
                    data_obj, created = UserExtensionData.objects.update_or_create(
                        user=user,
                        role_extension=field,
                        defaults={'field_value': field.default_value or ''}
                    )
                    if created:
                        applied_count += 1
        
        return Response({
            'message': f'模板已应用到 {users.count()} 个用户',
            'applied_count': applied_count,
            'user_count': users.count()
        })
    
    @action(detail=False, methods=['get'])
    def statistics(self, request):
        """获取系统统计信息"""
        # 验证权限
        if not (getattr(request.user, 'role', None) == UserRole.ADMIN):
            return Response(
                {'error': '权限不足'}, 
                status=status.HTTP_403_FORBIDDEN
            )
        
        # 用户统计
        user_stats = {}
        for role in UserRole.choices:
            role_value, role_label = role
            user_stats[role_value] = {
                'label': role_label,
                'count': CustomUser.objects.filter(role=role_value, is_active=True).count()
            }
        
        # 角色模板统计
        template_stats = []
        for template in RoleTemplate.objects.filter(is_active=True):
            total_users = CustomUser.objects.filter(role=template.role, is_active=True).count()
            users_with_data = UserExtensionData.objects.filter(
                role_extension__role=template.role
            ).values('user').distinct().count()
            
            template_stats.append({
                'template_id': template.pk,
                'template_name': template.template_name,
                'role': template.role,
                'total_users': total_users,
                'users_with_data': users_with_data,
                'coverage_rate': round(users_with_data / total_users * 100, 2) if total_users > 0 else 0
            })
        
        return Response({
            'user_statistics': user_stats,
            'template_statistics': template_stats,
            'summary': {
                'total_users': CustomUser.objects.filter(is_active=True).count(),
                'total_templates': RoleTemplate.objects.filter(is_active=True).count(),
                'total_extensions': RoleExtension.objects.filter(is_active=True).count()
            }
        })