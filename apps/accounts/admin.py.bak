from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from django.utils.html import format_html
from django.urls import reverse, path
from django.db import models
from django.contrib.auth.models import Group
from django import forms
from django.http import HttpResponseRedirect, JsonResponse
from django.shortcuts import get_object_or_404, render
from django.contrib import messages
from django.contrib.auth.forms import SetPasswordForm
from django.template.response import TemplateResponse
from django.core.exceptions import ObjectDoesNotExist
from typing import TYPE_CHECKING
from .models import CustomUser, UserLoginLog, UserRole, LearningProfile, RoleApproval, RoleExtension, UserExtensionData, RoleUserGroup, RoleLevel, RoleUser, UserExtension
from apps.permissions.widgets import StandardRoleSelectWidget, StandardRoleChoiceField
from apps.permissions.role_selector_config import StandardRoleAdminMixin

if TYPE_CHECKING:
    from django.forms import ModelForm

# 角色与组映射关系
ROLE_GROUP_MAPPING = {
    UserRole.STUDENT: '学生组',
    UserRole.PARENT: '家长组', 
    UserRole.TEACHER: '教师组',
    UserRole.ADMIN: '管理员组',
}

def sync_user_role_to_group(user):
    """同步用户角色到对应的组"""
    if not user.role:
        return False, "用户没有设置角色"
    
    # 获取目标组
    target_group_name = ROLE_GROUP_MAPPING.get(user.role)
    if not target_group_name:
        return False, f"角色 {user.get_role_display()} 没有对应的组"
    
    try:
        target_group = Group.objects.get(name=target_group_name)
    except ObjectDoesNotExist:
        return False, f"组 {target_group_name} 不存在，请先运行初始化命令"
    
    # 移除用户从所有角色组
    removed_groups = []
    for group_name in ROLE_GROUP_MAPPING.values():
        try:
            group = Group.objects.get(name=group_name)
            if user.groups.filter(pk=group.pk).exists():
                user.groups.remove(group)
                removed_groups.append(group_name)
        except ObjectDoesNotExist:
            pass
    
    # 添加用户到目标组
    if not user.groups.filter(pk=target_group.pk).exists():
        user.groups.add(target_group)
        return True, f"已将用户分配到 {target_group_name}"
    else:
        return True, f"用户已在 {target_group_name} 中"


# 自定义表单，让groups字段变为只读
class CustomUserForm(forms.ModelForm):
    """自定义用户表单，groups字段只读"""
    role = StandardRoleChoiceField(widget=StandardRoleSelectWidget())
    
    class Meta:
        model = CustomUser
        fields = '__all__'
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # 让groups字段变为只读
        if 'groups' in self.fields:
            self.fields['groups'].widget.attrs.update({
                'readonly': True,
                'disabled': True,
                'style': 'background-color: #f8f9fa; color: #6c757d; cursor: not-allowed;'
            })
            self.fields['groups'].help_text = '💡 组会根据角色自动分配，无需手动选择'


# 代理模型已移除，统一使用CustomUser进行管理


# 基础用户Admin类
class BaseRoleUserAdmin(UserAdmin):
    """基础角色用户Admin类"""
    form = CustomUserForm
    list_display = ['username', 'real_name', 'role', 'get_role_groups', 'email', 'phone', 'english_level', 'is_active', 'date_joined']
    list_filter = ['role', 'english_level', 'is_active', 'date_joined', 'groups']
    search_fields = ['username', 'real_name', 'email', 'phone']
    ordering = ['-date_joined']
    
    # 修改fieldsets，移除password字段，参考Django标准UserAdmin
    fieldsets = (
        (None, {'fields': ('username',)}),
        ('个人信息', {'fields': ('real_name', 'email', 'phone', 'role')}),
        ('权限', {'fields': ('is_active', 'is_staff', 'is_superuser')}),
        ('重要日期', {'fields': ('last_login', 'date_joined')}),
        ('备注', {'fields': ('notes',)}),
    )
    
    # 只读字段，避免在编辑页面显示敏感信息
    readonly_fields = ['last_login', 'date_joined']
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('username', 'real_name', 'email', 'role', 'password1', 'password2'),
        }),
    )
    
    def get_role_groups(self, obj):
        """显示角色对应的组（联动显示）"""
        role_group = ROLE_GROUP_MAPPING.get(obj.role)
        user_groups = list(obj.groups.values_list('name', flat=True))
        
        if role_group:
            if role_group in user_groups:
                # 已同步
                return format_html(
                    '<span style="color: #28a745; background: #d4edda; padding: 2px 6px; border-radius: 3px; font-size: 12px;">'
                    '🔗 {} ✓</span>',
                    role_group
                )
            else:
                # 未同步
                return format_html(
                    '<span style="color: #dc3545; background: #f8d7da; padding: 2px 6px; border-radius: 3px; font-size: 12px;">'
                    '⚠️ {} (未同步)</span>',
                    role_group
                )
        else:
            if user_groups:
                return format_html(
                    '<span style="color: #6c757d;">{}</span>',
                    ', '.join(user_groups)
                )
            return format_html('<span style="color: #6c757d;">无组</span>')
    
    get_role_groups.short_description = '角色组 (自动)'  # type: ignore
    
    def get_queryset(self, request):
        """基础查询集"""
        return super().get_queryset(request).prefetch_related('groups')
    
    def save_model(self, request, obj, form, change):
        """保存模型时自动同步角色到组并同步学习信息"""
        super().save_model(request, obj, form, change)
        
        # 自动同步角色到组
        success, message = sync_user_role_to_group(obj)
        if success:
            self.message_user(request, f'✅ {message}', level=messages.SUCCESS)
        else:
            self.message_user(request, f'❌ {message}', level=messages.ERROR)
        
        # 同步学习信息到角色增项系统（仅限学生角色）
        if obj.role == UserRole.STUDENT:
            self._sync_learning_info_to_extensions(request, obj)
    
    def _sync_learning_info_to_extensions(self, request, user):
        """同步学习信息到角色增项系统"""
        try:
            # 同步年级信息
            if user.grade_level:
                try:
                    grade_extension = RoleExtension.objects.get(
                        role=UserRole.STUDENT, 
                        field_name='grade_level',
                        is_active=True
                    )
                    UserExtensionData.objects.update_or_create(
                        user=user,
                        role_extension=grade_extension,
                        defaults={'field_value': user.grade_level}
                    )
                except RoleExtension.DoesNotExist:
                    pass
            
            # 同步英语水平信息
            if user.english_level:
                try:
                    english_extension = RoleExtension.objects.get(
                        role=UserRole.STUDENT, 
                        field_name='english_level',
                        is_active=True
                    )
                    UserExtensionData.objects.update_or_create(
                        user=user,
                        role_extension=english_extension,
                        defaults={'field_value': user.english_level}
                    )
                except RoleExtension.DoesNotExist:
                    pass
                    
        except Exception as e:
            messages.warning(request, f'学习信息同步到增项系统时出现问题: {str(e)}')


# 角色专属Admin类已移除，统一使用CustomUserAdmin管理所有角色

# 角色专属Admin类已移除，学习信息同步逻辑已集成到CustomUserAdmin中


# 统一用户Admin
class CustomUserAdmin(StandardRoleAdminMixin, BaseRoleUserAdmin):
    """统一用户管理Admin - 支持动态角色增项"""
    list_display = ['username', 'real_name', 'role', 'get_role_groups', 'email', 'phone', 'is_active', 'date_joined', 'get_extension_summary', 'manage_extensions_link', 'change_password_link']
    list_filter = ['role', 'english_level', 'is_active', 'date_joined', 'groups']
    search_fields = ['username', 'real_name', 'email', 'phone']
    ordering = ['-date_joined']
    
    # 重新定义fieldsets以包含学习信息
    fieldsets = (
        (None, {'fields': ('username',)}),
        ('个人信息', {'fields': ('real_name', 'email', 'phone', 'role')}),
        ('学习信息', {'fields': ('grade_level', 'english_level')}),
        ('权限', {'fields': ('is_active', 'is_staff', 'is_superuser')}),
        ('重要日期', {'fields': ('last_login', 'date_joined')}),
        ('备注', {'fields': ('notes',)}),
    )
    
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('username', 'real_name', 'email', 'role', 'grade_level', 'english_level', 'password1', 'password2'),
        }),
    )
    
    # 添加角色快速筛选链接
    def changelist_view(self, request, extra_context=None):
        """自定义列表视图，添加角色快速筛选"""
        extra_context = extra_context or {}
        
        # 统计各角色用户数量
        role_stats = {}
        for role_value, role_label in UserRole.choices:
            count = CustomUser.objects.filter(role=role_value).count()
            role_stats[role_value] = {'label': role_label, 'count': count}
        
        extra_context['role_stats'] = role_stats
        extra_context['current_role_filter'] = request.GET.get('role')
        
        return super().changelist_view(request, extra_context)
    
    # 继承BaseRoleUserAdmin的save_model方法，无需重复定义
    
    def change_password_link(self, obj):
        """密码修改链接"""
        url = reverse('admin:accounts_customuser_change_password', args=[obj.pk])
        return format_html(
            '<a href="{}" class="button" style="background: #007cba; color: white; padding: 4px 8px; '
            'text-decoration: none; border-radius: 3px; font-size: 12px;">🔑 修改密码</a>',
            url
        )
    change_password_link.short_description = '密码管理'  # type: ignore
    
    def get_extension_summary(self, obj):
        """显示用户的角色增项摘要"""
        # 只显示与用户当前角色匹配的增项数据
        extensions = UserExtensionData.objects.filter(  # type: ignore
            user=obj,
            role_extension__role=obj.role
        ).select_related('role_extension')
        if extensions.exists():
            count = extensions.count()
            return format_html(
             '<span style="color: #007cba; background: #e7f3ff; padding: 2px 6px; border-radius: 3px; font-size: 12px;">'  
             '📋 {} 项增项</span>',
             count
         )
        return format_html('<span style="color: #6c757d;">无增项</span>')
    get_extension_summary.short_description = '角色增项'  # type: ignore
    
    def manage_extensions_link(self, obj):
        """管理角色增项链接"""
        # 只为有角色增项配置的角色显示管理链接
        role_extensions = RoleExtension.objects.filter(role=obj.role, is_active=True)  # type: ignore
        if role_extensions.exists():
            url = reverse('admin:accounts_customuser_extensions', args=[obj.pk])
            return format_html(
                '<a href="{}" class="button" style="background: #28a745; color: white; padding: 4px 8px; '
                'text-decoration: none; border-radius: 3px; font-size: 12px;">📝 管理增项</a>',
                url
            )
        return format_html('<span style="color: #6c757d;">-</span>')
    manage_extensions_link.short_description = '增项管理'  # type: ignore
    
    def get_urls(self):
        """添加自定义URL"""
        urls = super().get_urls()
        custom_urls = [
            path(
                '<int:user_id>/extensions/',
                self.admin_site.admin_view(self.manage_extensions_view),
                name='accounts_customuser_extensions'
            ),
            path(
                '<int:user_id>/change_password/',
                self.admin_site.admin_view(self.change_password_view),
                name='accounts_customuser_change_password'
            ),
        ]
        return custom_urls + urls
    
    def manage_extensions_view(self, request, user_id):
        """管理用户角色增项视图"""
        user = get_object_or_404(CustomUser, pk=user_id)
        
        # 获取该角色的所有增项配置
        role_extensions = RoleExtension.objects.filter(  # type: ignore
            role=user.role, is_active=True
        ).order_by('sort_order', 'field_name')
        
        # 获取用户现有的增项数据
        user_extensions = {}
        for ext_data in UserExtensionData.objects.filter(user=user):  # type: ignore
            user_extensions[ext_data.role_extension.id] = ext_data.field_value
        
        if request.method == 'POST':
            # 保存增项数据
            for role_ext in role_extensions:
                field_name = f'extension_{role_ext.pk}'
                field_value = request.POST.get(field_name, '')
                
                # 更新或创建增项数据
                UserExtensionData.objects.update_or_create(  # type: ignore
                    user=user,
                    role_extension=role_ext,
                    defaults={'field_value': field_value}
                )
            
            messages.success(request, f'用户 {user.username} 的角色增项已更新！')
            return HttpResponseRedirect(reverse('admin:accounts_customuser_changelist'))
        
        context = {
            'title': f'管理用户角色增项: {user.username}',
            'user_obj': user,
            'role_extensions': role_extensions,
            'user_extensions': user_extensions,
            'opts': self.model._meta,
        }
        
        return TemplateResponse(
            request,
            'admin/accounts/manage_extensions.html',
            context
        )
    
    def change_password_view(self, request, user_id):
        """密码修改视图"""
        user = get_object_or_404(CustomUser, pk=user_id)
        
        if request.method == 'POST':
            form = SetPasswordForm(user, request.POST)
            if form.is_valid():
                form.save()
                messages.success(request, f'用户 {user.username} 的密码已成功修改！')
                return HttpResponseRedirect(reverse('admin:accounts_customuser_changelist'))
        else:
            form = SetPasswordForm(user)
        
        context = {
            'title': f'修改用户密码: {user.username}',
            'form': form,
            'user_obj': user,
            'opts': self.model._meta,
            'original': user,
            'is_popup': False,
            'save_as': False,
            'has_delete_permission': False,
            'has_add_permission': False,
            'has_change_permission': True,
        }
        
        return TemplateResponse(
            request,
            'admin/accounts/change_password.html',
            context
        )


@admin.register(UserLoginLog)
class UserLoginLogAdmin(admin.ModelAdmin):
    """用户登录日志Admin"""
    list_display = ['username', 'login_time', 'ip_address', 'login_success']
    list_filter = ['login_success', 'login_time']
    search_fields = ['username', 'ip_address']
    readonly_fields = ['username', 'login_time', 'ip_address', 'user_agent', 'login_success']
    ordering = ['-login_time']


# @admin.register(LearningProfile)
# class LearningProfileAdmin(admin.ModelAdmin):
#     """学习档案Admin - 已移除"""
#     pass


@admin.register(RoleApproval)
class RoleApprovalAdmin(StandardRoleAdminMixin, admin.ModelAdmin):
    """注册管理员审批Admin"""
    list_display = ['user', 'requested_role', 'current_role', 'status', 'created_at', 'approved_by', 'approval_actions']
    list_filter = ['status', 'requested_role', 'created_at']
    search_fields = ['user__username', 'user__real_name', 'reason']
    readonly_fields = ['user', 'requested_role', 'current_role', 'reason', 'created_at']
    ordering = ['-created_at']
    
    fieldsets = (
        ('申请信息', {
            'fields': ('user', 'requested_role', 'current_role', 'reason', 'created_at')
        }),
        ('审批信息', {
            'fields': ('status', 'admin_comment', 'approved_by')
        }),
    )
    
    def get_queryset(self, request):
        """只显示管理员角色申请"""
        return super().get_queryset(request).filter(requested_role=UserRole.ADMIN)
    
    def approval_actions(self, obj):
        """审批操作按钮"""
        if obj.status == 'pending':
            approve_url = reverse('admin:approve_role', args=[obj.pk])
            reject_url = reverse('admin:reject_role', args=[obj.pk])
            return format_html(
                '<a href="{}" class="button" style="background: #28a745; color: white; padding: 4px 8px; '
                'text-decoration: none; border-radius: 3px; font-size: 12px; margin-right: 5px;">✅ 通过</a>'
                '<a href="{}" class="button" style="background: #dc3545; color: white; padding: 4px 8px; '
                'text-decoration: none; border-radius: 3px; font-size: 12px;">❌ 拒绝</a>',
                approve_url, reject_url
            )
        elif obj.status == 'approved':
            return format_html(
                '<span style="color: #28a745; background: #d4edda; padding: 2px 6px; border-radius: 3px; font-size: 12px;">'
                '✅ 已通过</span>'
            )
        else:
            return format_html(
                '<span style="color: #dc3545; background: #f8d7da; padding: 2px 6px; border-radius: 3px; font-size: 12px;">'
                '❌ 已拒绝</span>'
            )
    
    approval_actions.short_description = '审批操作'  # type: ignore
    
    def get_urls(self):
        """添加自定义审批URL"""
        urls = super().get_urls()
        custom_urls = [
            path(
                'approve/<int:approval_id>/',
                self.admin_site.admin_view(self.approve_role_view),
                name='approve_role'
            ),
            path(
                'reject/<int:approval_id>/',
                self.admin_site.admin_view(self.reject_role_view),
                name='reject_role'
            ),
        ]
        return custom_urls + urls
    
    def approve_role_view(self, request, approval_id):
        """批准角色申请"""
        approval = get_object_or_404(RoleApproval, pk=approval_id, status='pending')
        
        if request.method == 'POST':
            admin_notes = request.POST.get('admin_notes', '')
            
            # 更新审批记录
            approval.status = 'approved'
            approval.admin_comment = admin_notes
            approval.approved_by = request.user
            approval.save()
            
            # 更新用户角色和状态
            user = approval.user
            user.role = approval.requested_role
            user.admin_approval_status = 'approved'
            user.is_active = True
            user.save()
            
            # 同步角色到组
            sync_user_role_to_group(user)
            
            messages.success(request, f'已批准用户 {user.username} 的管理员角色申请！')
            return HttpResponseRedirect(reverse('admin:accounts_roleapproval_changelist'))
        
        context = {
            'title': f'批准角色申请: {approval.user.username}',
            'approval': approval,
            'opts': self.model._meta,
        }
        
        return TemplateResponse(
            request,
            'admin/accounts/approve_role.html',
            context
        )
    
    def reject_role_view(self, request, approval_id):
        """拒绝角色申请"""
        approval = get_object_or_404(RoleApproval, pk=approval_id, status='pending')
        
        if request.method == 'POST':
            admin_notes = request.POST.get('admin_notes', '')
            
            # 更新审批记录
            approval.status = 'rejected'
            approval.admin_comment = admin_notes
            approval.approved_by = request.user
            approval.save()
            
            # 更新用户状态
            user = approval.user
            user.admin_approval_status = 'rejected'
            user.is_active = False  # 保持非激活状态
            user.save()
            
            messages.warning(request, f'已拒绝用户 {user.username} 的管理员角色申请！')
            return HttpResponseRedirect(reverse('admin:accounts_roleapproval_changelist'))
        
        context = {
            'title': f'拒绝角色申请: {approval.user.username}',
            'approval': approval,
            'opts': self.model._meta,
        }
        
        return TemplateResponse(
            request,
            'admin/accounts/reject_role.html',
            context
        )


@admin.register(RoleExtension)
class RoleExtensionAdmin(StandardRoleAdminMixin, admin.ModelAdmin):
    """角色增项配置Admin"""
    list_display = ['role', 'field_label', 'field_type', 'is_required', 'is_active', 'sort_order']
    list_filter = ['role', 'field_type', 'is_required', 'is_active']
    search_fields = ['role', 'field_label', 'field_name']
    ordering = ['role', 'sort_order', 'field_name']
    
    fieldsets = (
        ('基本信息', {
            'fields': ('role', 'field_name', 'field_label', 'field_type')
        }),
        ('配置选项', {
            'fields': ('field_choices', 'is_required', 'help_text', 'sort_order', 'is_active')
        }),
    )
    
    # 角色选择器配置已通过StandardRoleAdminMixin自动处理
    
    def get_form(self, request, obj=None, change=False, **kwargs):
        """自定义表单"""
        form = super().get_form(request, obj, change, **kwargs)
        # 为field_choices字段添加帮助文本
        try:
            if hasattr(form, 'base_fields') and 'field_choices' in getattr(form, 'base_fields', {}):
                form.base_fields['field_choices'].help_text = (  # type: ignore
                    '仅当字段类型为"选择字段"时需要填写。格式：[["value1", "显示名1"], ["value2", "显示名2"]]'
                )
            elif hasattr(form, 'fields') and 'field_choices' in getattr(form, 'fields', {}):
                form.fields['field_choices'].help_text = (  # type: ignore
                    '仅当字段类型为"选择字段"时需要填写。格式：[["value1", "显示名1"], ["value2", "显示名2"]]'
                )
        except (AttributeError, TypeError):
            pass  # 忽略类型错误
        return form


@admin.register(RoleUserGroup)
class RoleUserGroupAdmin(StandardRoleAdminMixin, admin.ModelAdmin):
    """角色所辖用户Admin"""
    list_display = ['name', 'role', 'get_user_count', 'is_active', 'created_at']
    list_filter = ['role', 'is_active', 'created_at']
    search_fields = ['name', 'description']
    ordering = ['role', 'name']
    filter_horizontal = ['users']  # 使用水平过滤器显示用户选择
    
    fieldsets = (
        ('基本信息', {
            'fields': ('name', 'role', 'description', 'is_active')
        }),
        ('用户配置', {
            'fields': ('users',),
            'description': '选择该角色下的用户加入此组。只显示激活状态的用户。'
        }),
    )
    
    def formfield_for_choice_field(self, db_field, request, **kwargs):
        """为角色字段使用标准角色选择器"""
        if db_field.name == 'role':
            kwargs['widget'] = StandardRoleSelectWidget()
        return super().formfield_for_choice_field(db_field, request, **kwargs)
    
    def get_user_count(self, obj):
        """获取组内用户数量"""
        return obj.users.count()
    get_user_count.short_description = '用户数量'  # type: ignore
    
    def formfield_for_manytomany(self, db_field, request, **kwargs):
        """自定义多对多字段的查询集"""
        if db_field.name == "users":
            # 根据当前选择的角色过滤用户
            if request.method == 'GET' and 'role' in request.GET:
                role = request.GET['role']
                kwargs["queryset"] = CustomUser.objects.filter(
                    role=role, 
                    is_active=True
                ).order_by('real_name', 'username')
            else:
                kwargs["queryset"] = CustomUser.objects.filter(
                    is_active=True
                ).order_by('role', 'real_name', 'username')
        return super().formfield_for_manytomany(db_field, request, **kwargs)
    
    def save_model(self, request, obj, form, change):
        """保存模型时设置创建者"""
        if not change:  # 新建时
            obj.created_by = request.user
        super().save_model(request, obj, form, change)
    
    class Media:
        js = ('admin/js/role_user_group_admin.js',)


@admin.register(UserExtensionData)
class UserExtensionDataAdmin(admin.ModelAdmin):
    """角色所辖用户增项Admin"""
    list_display = ['user', 'get_role', 'get_field_label', 'field_value', 'updated_at']
    list_filter = ['role_extension__role', 'role_extension__field_type', 'updated_at']
    search_fields = ['user__username', 'user__real_name', 'role_extension__field_label']
    ordering = ['user', 'role_extension__sort_order']
    
    # 禁用增删改操作，只提供查看功能
    def has_add_permission(self, request):
        return False
    
    def has_change_permission(self, request, obj=None):
        return False
    
    def has_delete_permission(self, request, obj=None):
        return False
    
    def get_role(self, obj):
        """获取角色"""
        return obj.role_extension.role
    get_role.short_description = '角色'  # type: ignore
    
    def get_field_label(self, obj):
        """获取字段标签"""
        return obj.role_extension.field_label





# 注册模型
admin.site.register(CustomUser, CustomUserAdmin)

# 注册角色所辖用户增项的级联模型
from .admin_role_hierarchy import RoleLevelAdmin, RoleUserAdmin

# 直接使用admin_role_hierarchy中定义的Admin类
admin.site.register(RoleLevel, RoleLevelAdmin)
admin.site.register(RoleUser, RoleUserAdmin)
# UserExtension已在admin_role_hierarchy.py中通过@admin.register装饰器注册，无需重复注册