# Generated by Django 4.2.7 on 2025-08-04 09:21

from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("admin", "管理员"),
                            ("teacher", "教师"),
                            ("student", "学生"),
                            ("parent", "家长"),
                        ],
                        default="student",
                        max_length=20,
                        verbose_name="用户角色",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[\\d\\-\\+\\(\\)\\s]+$"
                            )
                        ],
                        verbose_name="手机号码",
                    ),
                ),
                (
                    "real_name",
                    models.CharField(blank=True, max_length=100, verbose_name="真实姓名"),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="最多500字符",
                        max_length=500,
                        verbose_name="备注",
                    ),
                ),
                (
                    "is_active_account",
                    models.BooleanField(
                        default=True, help_text="取消勾选表示禁用账号", verbose_name="账号状态"
                    ),
                ),
                (
                    "grade_level",
                    models.CharField(
                        blank=True,
                        help_text="如：小学三年级、初中一年级等",
                        max_length=20,
                        verbose_name="年级",
                    ),
                ),
                (
                    "english_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("beginner", "初级"),
                            ("elementary", "基础"),
                            ("intermediate", "中级"),
                            ("advanced", "高级"),
                        ],
                        max_length=20,
                        verbose_name="英语水平",
                    ),
                ),
                (
                    "children",
                    models.ManyToManyField(
                        blank=True,
                        help_text="家长角色可关联多个学生账号",
                        related_name="parent_users",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="关联学生",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="学生角色可关联家长账号",
                        limit_choices_to={"role": "parent"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="student_children",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="关联家长",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "用户",
                "verbose_name_plural": "用户管理",
            },
        ),
        migrations.CreateModel(
            name="UserLoginLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("username", models.CharField(max_length=150, verbose_name="用户名")),
                (
                    "login_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="登录时间"),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="IP地址"
                    ),
                ),
                ("user_agent", models.TextField(blank=True, verbose_name="用户代理")),
                (
                    "login_success",
                    models.BooleanField(default=True, verbose_name="登录成功"),
                ),
            ],
            options={
                "verbose_name": "登录日志",
                "verbose_name_plural": "登录日志管理",
                "ordering": ["-login_time"],
            },
        ),
        migrations.CreateModel(
            name="LearningProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "total_study_time",
                    models.PositiveIntegerField(default=0, verbose_name="总学习时长(分钟)"),
                ),
                (
                    "completed_lessons",
                    models.PositiveIntegerField(default=0, verbose_name="完成课程数"),
                ),
                (
                    "current_streak",
                    models.PositiveIntegerField(default=0, verbose_name="连续学习天数"),
                ),
                (
                    "max_streak",
                    models.PositiveIntegerField(default=0, verbose_name="最长连续学习天数"),
                ),
                (
                    "last_study_date",
                    models.DateField(blank=True, null=True, verbose_name="最后学习日期"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="用户",
                    ),
                ),
            ],
            options={
                "verbose_name": "学习档案",
                "verbose_name_plural": "学习档案管理",
            },
        ),
        migrations.CreateModel(
            name="AdminUserProxy",
            fields=[],
            options={
                "verbose_name": "管理员账号",
                "verbose_name_plural": "管理员账号管理",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("accounts.customuser",),
        ),
        migrations.CreateModel(
            name="ParentUserProxy",
            fields=[],
            options={
                "verbose_name": "家长账号",
                "verbose_name_plural": "家长账号管理",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("accounts.customuser",),
        ),
        migrations.CreateModel(
            name="StudentUserProxy",
            fields=[],
            options={
                "verbose_name": "学生账号",
                "verbose_name_plural": "学生账号管理",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("accounts.customuser",),
        ),
        migrations.CreateModel(
            name="TeacherUserProxy",
            fields=[],
            options={
                "verbose_name": "教师账号",
                "verbose_name_plural": "教师账号管理",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("accounts.customuser",),
        ),
    ]
