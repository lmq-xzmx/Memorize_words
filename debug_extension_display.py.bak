#!/usr/bin/env python
"""
调试增项显示问题

从截图看到有些用户显示了不应该显示的增项，需要检查显示逻辑
"""

import os
import sys
import django

# 设置Django环境
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'english_learning_platform.settings')
django.setup()

from apps.accounts.models import CustomUser, UserExtensionData, RoleExtension, UserRole
from apps.accounts.admin import StudentUserAdmin, CustomUserAdmin
from django.contrib import admin
from django.utils.html import strip_tags


def check_specific_users():
    """检查截图中显示有问题的特定用户"""
    print("🔍 检查截图中显示有问题的特定用户...")
    print("=" * 60)
    
    # 从截图中看到的有问题的用户
    problem_users = [
        'AnonymousUser',
        'jiazhang1', 
        'admin333',
        'lmq277',
        'testlogin',
        'whh'
    ]
    
    for username in problem_users:
        try:
            user = CustomUser.objects.get(username=username)
            print(f"\n👤 用户: {user.username} ({user.real_name or '无姓名'})")
            print(f"  🏷️  用户角色: {user.role} ({user.get_role_display()})")
            
            # 检查该用户的所有增项数据
            user_extensions = UserExtensionData.objects.filter(user=user).select_related('role_extension')
            print(f"  📊 增项数据数量: {user_extensions.count()}")
            
            for ext_data in user_extensions:
                print(f"    - {ext_data.role_extension.field_label}: {ext_data.field_value}")
                print(f"      增项角色: {ext_data.role_extension.role}")
                if user.role != ext_data.role_extension.role:
                    print(f"      ❌ 角色不匹配！用户角色: {user.role}, 增项角色: {ext_data.role_extension.role}")
                else:
                    print(f"      ✅ 角色匹配")
            
            # 测试admin显示方法
            admin_instance = StudentUserAdmin(CustomUser, admin.site)
            display_result = admin_instance.get_extension_summary(user)
            display_text = strip_tags(display_result)
            print(f"  🖥️  Admin显示结果: {display_text}")
            
        except CustomUser.DoesNotExist:
            print(f"❌ 用户 {username} 不存在")


def check_all_users_with_extensions():
    """检查所有有增项数据的用户"""
    print("\n🔍 检查所有有增项数据的用户...")
    print("=" * 50)
    
    # 获取所有有增项数据的用户
    users_with_extensions = CustomUser.objects.filter(
        userextensiondata__isnull=False
    ).distinct().order_by('username')
    
    print(f"📊 找到 {users_with_extensions.count()} 个有增项数据的用户")
    
    for user in users_with_extensions:
        print(f"\n👤 {user.username} ({user.get_role_display()})")
        
        # 获取该用户的增项数据
        extensions = UserExtensionData.objects.filter(user=user).select_related('role_extension')
        
        for ext in extensions:
            role_match = "✅" if user.role == ext.role_extension.role else "❌"
            print(f"  {role_match} {ext.role_extension.field_label}: {ext.field_value} (增项角色: {ext.role_extension.role})")


def check_extension_summary_logic():
    """检查get_extension_summary方法的逻辑"""
    print("\n🔍 检查get_extension_summary方法的逻辑...")
    print("=" * 50)
    
    # 测试几个特定用户
    test_users = ['AnonymousUser', 'student1', 'test_teacher_obj']
    
    for username in test_users:
        try:
            user = CustomUser.objects.get(username=username)
            print(f"\n👤 测试用户: {user.username} (角色: {user.role})")
            
            # 直接查询该用户的增项数据
            extensions = UserExtensionData.objects.filter(user=user).select_related('role_extension')
            print(f"  📊 直接查询结果: {extensions.count()} 条增项数据")
            
            for ext in extensions:
                print(f"    - {ext.role_extension.field_label}: {ext.field_value}")
            
            # 使用admin方法
            admin_instance = StudentUserAdmin(CustomUser, admin.site)
            
            # 模拟admin方法的查询
            admin_extensions = UserExtensionData.objects.filter(user=user).select_related('role_extension')
            print(f"  🖥️  Admin查询结果: {admin_extensions.count()} 条增项数据")
            
            # 获取显示结果
            display_result = admin_instance.get_extension_summary(user)
            display_text = strip_tags(display_result)
            print(f"  📺 显示结果: {display_text}")
            
        except CustomUser.DoesNotExist:
            print(f"❌ 用户 {username} 不存在")


def check_role_extension_configs():
    """检查角色增项配置"""
    print("\n🔍 检查角色增项配置...")
    print("=" * 40)
    
    all_extensions = RoleExtension.objects.filter(is_active=True).order_by('role', 'field_name')
    
    role_groups = {}
    for ext in all_extensions:
        if ext.role not in role_groups:
            role_groups[ext.role] = []
        role_groups[ext.role].append(ext)
    
    for role, extensions in role_groups.items():
        role_display = dict(UserRole.choices).get(role, role)
        print(f"\n📋 {role_display} ({role}) 角色增项配置:")
        for ext in extensions:
            data_count = UserExtensionData.objects.filter(role_extension=ext).count()
            print(f"  - {ext.field_label} ({ext.field_name}): {data_count} 条数据")


def find_cross_role_data():
    """查找跨角色的增项数据"""
    print("\n🔍 查找跨角色的增项数据...")
    print("=" * 40)
    
    # 查找用户角色与增项角色不匹配的数据
    mismatched_query = """
    SELECT u.username, u.role as user_role, re.role as extension_role, 
           re.field_label, ued.field_value
    FROM accounts_userextensiondata ued
    JOIN accounts_customuser u ON ued.user_id = u.id
    JOIN accounts_roleextension re ON ued.role_extension_id = re.id
    WHERE u.role != re.role
    """
    
    from django.db import connection
    with connection.cursor() as cursor:
        cursor.execute(mismatched_query)
        results = cursor.fetchall()
    
    if results:
        print(f"❌ 发现 {len(results)} 条跨角色的增项数据:")
        for row in results:
            username, user_role, ext_role, field_label, field_value = row
            print(f"  - {username}: 用户角色({user_role}) vs 增项角色({ext_role}) - {field_label}: {field_value}")
    else:
        print("✅ 没有发现跨角色的增项数据")
    
    return results


def main():
    """主函数"""
    print("🚀 开始调试增项显示问题...")
    print("=" * 70)
    
    try:
        # 1. 检查特定有问题的用户
        check_specific_users()
        
        # 2. 检查所有有增项数据的用户
        check_all_users_with_extensions()
        
        # 3. 检查显示逻辑
        check_extension_summary_logic()
        
        # 4. 检查角色增项配置
        check_role_extension_configs()
        
        # 5. 查找跨角色数据
        mismatched_data = find_cross_role_data()
        
        if mismatched_data:
            print(f"\n⚠️  发现问题！需要修复跨角色的增项数据")
            return False
        else:
            print(f"\n🎉 数据检查完成，没有发现明显问题")
            print(f"💡 如果界面仍显示异常，可能是缓存或前端显示问题")
            return True
        
    except Exception as e:
        print(f"❌ 调试过程中出现错误: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)